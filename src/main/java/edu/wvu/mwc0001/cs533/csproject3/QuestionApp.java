/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package edu.wvu.mwc0001.cs533.csproject3;

import java.io.File;
import javax.swing.JFileChooser;
import java.util.List;
import javax.swing.DefaultListModel;
/**
 *
 * @author mc
 */
public class QuestionApp extends javax.swing.JFrame {
    private QuestionAnswer currentQuestionAnswer = new QuestionAnswer();
    private Score gameScore = new Score();
    private QuestionFile questionBatch;
    private DefaultListModel answerListModel = new DefaultListModel();
             
    /**
     * Creates new form QuestionApp
     */
    public QuestionApp() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        QuestionArea = new javax.swing.JTextArea();
        jButtonSubmit = new javax.swing.JButton();
        jButtonStart = new javax.swing.JButton();
        jButtonNext = new javax.swing.JButton();
        jSpinnerNumberOfQuestions = new javax.swing.JSpinner();
        jButtonEnd = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabelFilePath = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        questionsLeftLabel = new javax.swing.JLabel();
        questionsCorrectLabel = new javax.swing.JLabel();
        jLabelAnswerCheck = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabelQuestionsSkipped = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        LoadQuestionFile = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItemExit = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        QuestionArea.setEditable(false);
        QuestionArea.setColumns(72);
        QuestionArea.setFont(new java.awt.Font("Helvetica Neue", 0, 12)); // NOI18N
        QuestionArea.setLineWrap(true);
        QuestionArea.setRows(10);
        QuestionArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(QuestionArea);

        jButtonSubmit.setText("Submit");
        jButtonSubmit.setEnabled(false);
        jButtonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSubmitActionPerformed(evt);
            }
        });

        jButtonStart.setText("Start");
        jButtonStart.setActionCommand("StartEnd");
        jButtonStart.setEnabled(false);
        jButtonStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStartActionPerformed(evt);
            }
        });

        jButtonNext.setText("Next");
        jButtonNext.setEnabled(false);
        jButtonNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonNextActionPerformed(evt);
            }
        });

        jSpinnerNumberOfQuestions.setModel(new javax.swing.SpinnerNumberModel(1, 1, 1000, 1));
        jSpinnerNumberOfQuestions.setEnabled(false);

        jButtonEnd.setText("End");
        jButtonEnd.setEnabled(false);
        jButtonEnd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonEndActionPerformed(evt);
            }
        });

        jLabel1.setText("Question File:");

        jLabelFilePath.setText("Select Question File To Start");

        jList1.setModel(answerListModel);
        jList1.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jList1.setAutoscrolls(false);
        jList1.setEnabled(false);
        jList1.setVerifyInputWhenFocusTarget(false);
        jList1.setVisibleRowCount(10);
        jScrollPane3.setViewportView(jList1);
        jList1.getAccessibleContext().setAccessibleName("");

        jLabel2.setText("Questions Left:");

        jLabel3.setText("Questions Correct:");

        jLabel4.setText("Number of Questions");

        questionsLeftLabel.setText("0");

        questionsCorrectLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        questionsCorrectLabel.setText("0");
        questionsCorrectLabel.setFocusable(false);

        jLabelAnswerCheck.setFont(new java.awt.Font("Helvetica Neue", 0, 18)); // NOI18N
        jLabelAnswerCheck.setText("File->Load Question File to start");

        jLabel5.setText("Questions Skipped:");

        jLabelQuestionsSkipped.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabelQuestionsSkipped.setText("0");

        jLabel6.setText("Question:");

        jLabel7.setText("Possible Answers: ");

        jMenu1.setText("File");

        LoadQuestionFile.setText("Load Question File");
        LoadQuestionFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LoadQuestionFileActionPerformed(evt);
            }
        });
        jMenu1.add(LoadQuestionFile);
        jMenu1.add(jSeparator2);

        jMenuItemExit.setText("Exit");
        jMenuItemExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemExitActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItemExit);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(136, 136, 136)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 506, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jSpinnerNumberOfQuestions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 734, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelQuestionsSkipped, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(questionsLeftLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(questionsCorrectLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jLabelAnswerCheck)
                                        .addGap(117, 117, 117))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonStart, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jButtonSubmit)
                                .addGap(30, 30, 30)
                                .addComponent(jButtonNext)
                                .addGap(46, 46, 46)
                                .addComponent(jButtonEnd))
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7))))
                .addContainerGap(44, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6)
                .addGap(2, 2, 2)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7)
                .addGap(3, 3, 3)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButtonStart, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButtonNext)
                        .addComponent(jButtonEnd)
                        .addComponent(jButtonSubmit)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinnerNumberOfQuestions, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(questionsLeftLabel))
                        .addGap(13, 13, 13)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(questionsCorrectLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabelAnswerCheck)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabelQuestionsSkipped))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabelFilePath))
                .addGap(15, 15, 15))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    private void EndGame(){
        String newline = System.getProperty("line.separator");
        //StringBuilder endText = new StringBuilder();
        String endText = "Game Over!"+newline+"Questions Answered: "
                +gameScore.getNumberOfQuestionsAnswered()+newline+"Questions Correct: "+
                gameScore.getTotalCorrect()+newline+"Questions Skipped: "+gameScore.getQuestionsSkipped()
                +newline+"Game duration in minutes: "+gameScore.getGameDurationMinutesString();
    
        jButtonEnd.setEnabled(false);
        jButtonNext.setEnabled(false);
        jButtonSubmit.setEnabled(false);
        QuestionArea.setText(endText);   
        jLabelAnswerCheck.setText("Percent Correct: "+gameScore.percentCorrectString());
    }
    
    private void CheckQuestionNumberChooser(){
        jSpinnerNumberOfQuestions.setValue(questionBatch.QuestionFileLoad.size());
        gameScore.setNumberToAsk((Integer) jSpinnerNumberOfQuestions.getValue());
    }
    
    private void LoadQuestion(int questionIndex){        
        currentQuestionAnswer = questionBatch.getNextQuestionAnswer(questionIndex);
        QuestionArea.setText(currentQuestionAnswer.getQuestionString());
        List<String> answers = currentQuestionAnswer.getAnswers();
        // System.out.println(answers.toString());           
        answerListModel.clear();
        for (String answerItem : answers){
            answerListModel.addElement(answerItem);
        }
       // jLabelAnswerCheck.setText(Integer.toString(currentQuestionAnswer.getCorrectAnswer()));
                   //jScrollPane3 = new JScrollPane(jList1);
                   //this.jList1.setModel(new DefaultListModel<String>());
                   //this.jList1.setEnabled(true);
                   //this.jList1.updateUI();
                   //this.jList1.ensureIndexIsVisible(answers.size());                   
    } 
    
    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
 //start end button        // TODO add your handling code here:
 //QuestionArea.setText("Pressed Start");
        jButtonStart.setEnabled(false);
        jButtonEnd.setEnabled(true);
        jButtonNext.setEnabled(false);
        jButtonSubmit.setEnabled(true);
        jSpinnerNumberOfQuestions.setEnabled(false);
        LoadQuestion(gameScore.getCurrentQuestion());
        gameScore.setNumberToAsk((Integer) jSpinnerNumberOfQuestions.getValue());
         
        jList1.setEnabled(true);
        questionsCorrectLabel.setText(Integer.toString(gameScore.getTotalCorrect()));
        questionsLeftLabel.setText(Integer.toString(gameScore.getQuestionsToAskRemaining())); 
        jLabelAnswerCheck.setText("");
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void LoadQuestionFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LoadQuestionFileActionPerformed
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();    
        int result = fileChooser.showOpenDialog(this);
                // Check if a file is selected
        if (result == fileChooser.APPROVE_OPTION) {
                    // Get the selected file
            File selectedFile = fileChooser.getSelectedFile();
                       // QuestionArea.setText(selectedFile.toString());
            jLabelFilePath.setText(selectedFile.toString());
            this.gameScore.resetScore();
            this.questionBatch = new QuestionFile(selectedFile.toString());
            jSpinnerNumberOfQuestions.setModel(new javax.swing.SpinnerNumberModel(questionBatch.QuestionFileLoad.size(), 1, questionBatch.QuestionFileLoad.size(), 1));  
                     // jSpinnerNumberOfQuestions.setValue(questionBatch.QuestionFileLoad.size());
                    // Display the selected file path
                    //JOptionPane.showMessageDialog(frame, "Selected File: " + selectedFile.getAbsolutePath());
            jButtonStart.setEnabled(true);
            jButtonEnd.setEnabled(false);
            jButtonNext.setEnabled(false);
            jButtonSubmit.setEnabled(false);
            questionBatch.shuffleQuestionFile();              
            gameScore.setNumberToAsk((Integer) jSpinnerNumberOfQuestions.getValue());
            jSpinnerNumberOfQuestions.setEnabled(true);  
            jLabelAnswerCheck.setText("Press Start To Begin");
        }
        
    }//GEN-LAST:event_LoadQuestionFileActionPerformed

    private void jMenuItemExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemExitActionPerformed
        // TODO add your handling code here:
          System.exit(0);
    }//GEN-LAST:event_jMenuItemExitActionPerformed

    private void jButtonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSubmitActionPerformed
        // TODO add your handling code here:
        // Check answer display correct answer 
            jButtonStart.setEnabled(false);
            jButtonEnd.setEnabled(true);
            jButtonNext.setEnabled(true);
            jButtonSubmit.setEnabled(false);    
            jSpinnerNumberOfQuestions.setEnabled(false);
            
            //System.out.println(jList1.getSelectedIndex());
            if (jList1.getSelectedIndex() >= 0){
                if ((jList1.getSelectedIndex() + 1) == currentQuestionAnswer.getCorrectAnswer() ){
                    gameScore.addAnsweredCorrect();
                    jLabelAnswerCheck.setText("Correct!");
                }else{
                    gameScore.addAnsweredInCorrect(jList1.getSelectedIndex()+1);
                    jLabelAnswerCheck.setText("Wrong! ");
                }
             jList1.setEnabled(false);
             
            }else{
                gameScore.addQuestionsSkipped();
                jLabelAnswerCheck.setText("Skipped");
            }
            questionsCorrectLabel.setText(Integer.toString(gameScore.getTotalCorrect()));
            questionsLeftLabel.setText(Integer.toString(gameScore.getQuestionsToAskRemaining()));      
            jLabelQuestionsSkipped.setText (gameScore.getQuestionsSkippedString());
            if (gameScore.getQuestionsLeft() == 0){
               // jButtonNext.setEnabled(false);
               EndGame();                
            }
    }//GEN-LAST:event_jButtonSubmitActionPerformed

    private void jButtonEndActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonEndActionPerformed
                    EndGame();
    }//GEN-LAST:event_jButtonEndActionPerformed

    private void jButtonNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonNextActionPerformed
        // TODO add your handling code here:
            jButtonStart.setEnabled(false);
            jButtonEnd.setEnabled(true);
            jButtonNext.setEnabled(false);
            jButtonSubmit.setEnabled(true);
            LoadQuestion(gameScore.nextQuestion());
            jList1.setEnabled(true);
                   
    }//GEN-LAST:event_jButtonNextActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QuestionApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QuestionApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QuestionApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QuestionApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QuestionApp().setVisible(true);
            }
        });
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem LoadQuestionFile;
    private javax.swing.JTextArea QuestionArea;
    private javax.swing.JButton jButtonEnd;
    private javax.swing.JButton jButtonNext;
    private javax.swing.JButton jButtonStart;
    private javax.swing.JButton jButtonSubmit;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabelAnswerCheck;
    private javax.swing.JLabel jLabelFilePath;
    private javax.swing.JLabel jLabelQuestionsSkipped;
    private javax.swing.JList<String> jList1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItemExit;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JSpinner jSpinnerNumberOfQuestions;
    private javax.swing.JLabel questionsCorrectLabel;
    private javax.swing.JLabel questionsLeftLabel;
    // End of variables declaration//GEN-END:variables
}
